server:
  port: 8080

spring:
  data:
    mongodb:
      authentication-database: admin
      host: 10.1.60.127
      port: 27017
      username: mongo
      password: MongoDB_863*^#
      database: pacific
  main:
    allow-bean-definition-overriding: true
  kafka:
    bootstrap-servers: 10.1.60.126:9192 #Kafka集群
    producer:    #生产者配置
      retries: 0
      acks: 1    # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384 # 批量大小
      properties:
        linger:
          ms: 0   # 提交延时 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka   linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
      buffer-memory: 33554432 # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer #Kafka提供的序列化
      value-serializer: org.apache.kafka.common.serialization.StringSerializer #Kafka提供的反序列化类
    consumer:
      properties:
        group:
          id: defaultConsumerGroup # 默认的消费组ID
        session:
          timeout:
            ms: 120000 # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
        request:
          timeout:
            ms: 180000 # 消费请求超时时间
      enable-auto-commit: true # 是否自动提交offset
      auto-offset-reset: latest # 当kafka中没有初始offset或offset超出范围时将自动重置offset 参数值earliest:重置为分区中最小的offset; latest:重置为分区中最新的offset(消费分区中新产生的数据); none:只要有一个分区不存在已提交的offset,就抛出异常;
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer #Kafka提供的序列化
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer #Kafka提供的反序列化类
      auto-commit-interval: 1000ms # 提交offset延时(接收到消息后多久提交offset)
